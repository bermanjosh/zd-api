---
swagger: "2.0"
info:
  description: ""
  version: ""
  title: "ZDocs"
  termsOfService: ""
  contact: {}
host: "localhost:3000"
basePath: "/api"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /search:
    get:
      summary: "Search"
      parameters:
      - name: "q"
        in: "query"
        required: false
        type: "string"
        description: "Text query you want to match against"
      - name: "source"
        in: "query"
        required: false
        type: "string"
        description: "Filter results only to specific type of content."
        enum:
        - "bundle"
        - "contributedArticle"
        - "contributedVideo"
        - "all"
        x-example: "bundle"
      - name: "rpp"
        in: "query"
        required: false
        type: "integer"
        description: "Results per page"
        x-example: 25
      - name: "page"
        in: "query"
        required: false
        type: "integer"
        description: "Number of the page to retrieve"
        x-example: 1
      - name: "labelkey"
        in: "query"
        required: false
        type: "string"
        description: "The label filter allows you to filter the returned list of results\
          \ based on your taxonomy tags. You can include one or more valid subjecthead\
          \ key or subjectdef key from your taxonomy."
        x-example: "labelkey=prod-rtr-industrial"
      - name: "labels"
        in: "query"
        required: false
        type: "number"
        description: "[Deprecated, replaced by labelkey] The labels filter allows\
          \ you to filter the returned list of results based on database IDs of a\
          \ valid subjecthead key or subjectdef key from your taxonomy."
        x-example: "labels=4"
      - name: "bundle"
        in: "query"
        required: false
        type: "string"
        description: "Filter search results to show only to content from a specific\
          \ bundle"
        x-example: "bundle=AISuite_230_ConceptsGuide_allOS_en_HTML5"
      - name: "language"
        in: "query"
        required: false
        type: "string"
        description: "Filter only content marked with this language code"
        x-example: "enus"
      - name: "date_filter.type"
        in: "query"
        required: false
        type: "string"
        description: "The date filter allows you to filter the returned list of results\
          \ based on the following date type:\n\nCreated: The date which the content\
          \ was created on based on the CMS/authoring tool records (if specified).\n\
          \nLast revised: The date which the content was last revised based on the\
          \ CMS/authoring tool records (if specified).\n\nLast uploaded: The UTC dateTime\
          \ which the content was last uploaded"
        enum:
        - "created"
        - "lastRevised"
        - "lastUploaded"
        x-example: "created"
      - name: "date_filter.startValue"
        in: "query"
        required: false
        type: "string"
        format: "date-time"
        description: "The start date you want the date filter to use"
        x-example: "2018-03-27"
      - name: "date_filter.endValue"
        in: "query"
        required: false
        type: "string"
        format: "date-time"
        description: "The end date you want the date filter to use"
        x-example: "2018-03-29"
      - name: "sort.field"
        in: "query"
        required: true
        type: "string"
        description: "Sort the returned list of results by"
        default: "score"
        enum:
        - "created"
        - "lastRevised"
        - "lastUploaded"
        - "title"
        - "score"
        - "likes"
        - "views (reserved for future use)"
        x-example: "created"
      - name: "sort.value"
        in: "query"
        required: true
        type: "string"
        description: "What order to sort by"
        default: "dec"
        enum:
        - "asc"
        - "dec"
      - name: "personalize"
        in: "query"
        required: false
        type: "boolean"
        description: "Weight results based on user-defined personal search preferences"
      - name: "exact_facet_match"
        in: "query"
        required: false
        type: "boolean"
        description: "[Reserved for future implementation] Only return content which\
          \ is *only* tagged with selected facets."
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Search Results"
  /bundlelist:
    get:
      summary: "load a list of bundles"
      parameters:
      - name: "rpp"
        in: "query"
        required: false
        type: "integer"
        description: "Number of bundles to return in each page"
        x-example: 25
      - name: "page"
        in: "query"
        required: false
        type: "integer"
        description: "Number of the page to retrieve"
        x-example: 1
      - name: "name_filter.field"
        in: "query"
        required: false
        type: "string"
        description: "The name filter allows you to filter the returned list of bundles\
          \ based on a certain string match against the following field:"
        enum:
        - "Title"
        - "Name"
        x-example: "Title"
      - name: "name_filter.value"
        in: "query"
        required: false
        type: "string"
        description: "The value to filter the \"name\" field by"
        x-example: "Acme Installation"
      - name: "type_filter"
        in: "query"
        required: false
        type: "string"
        description: "Return only bundles of the this type"
        enum:
        - "HTMLBundle"
        - "ResourceBundle"
        x-example: "HTMLBundle"
      - name: "metadata_filter.field"
        in: "query"
        required: false
        type: "string"
        description: "The metadata filter allows you to filter the returned list of\
          \ bundles based on a hit against this metadata name:"
        x-example: "Author"
      - name: "metadata_filter.value"
        in: "query"
        required: false
        type: "string"
        description: "The value to filter the “metadata_filter.field” field by"
        x-example: "Jane Austin"
      - name: "labelkey"
        in: "query"
        required: false
        type: "string"
        description: "The label filter allows you to filter the returned list of bundles\
          \ based on your taxonomy tags. You can include one or more valid subjecthead\
          \ key or subjectdef key from your taxonomy."
        x-example: "labelkey=prod-rtr-industrial"
      - name: "labels"
        in: "query"
        required: false
        type: "string"
        description: "[Deprecated, replaced by labelkey] The labels filter allows\
          \ you to filter the returned list of bundles based on database IDs of a\
          \ valid subjecthead key or subjectdef key from your taxonomy."
        x-example: "labels=4"
      - name: "date_filter.type"
        in: "query"
        required: false
        type: "string"
        description: "The date filter allows you to filter the returned list of bundles\
          \ based on the following date type:\n\nCreated: The date which the publication\
          \ was created on based on the CMS/authoring tool records (if specified).\n\
          \nLast revised: The date which the publication was last revised based on\
          \ the CMS/authoring tool records (if specified).\n\nLast uploaded: The UTC\
          \ dateTime which the bundle was last uploaded"
        enum:
        - "created"
        - "last_revised"
        - "last_uploaded"
        x-example: "created"
      - name: "date_filter.startValue"
        in: "query"
        required: false
        type: "string"
        format: "date-time"
        description: "The start date you want the date filter to use"
        x-example: "2018-03-27"
      - name: "date_filter.endValue"
        in: "query"
        required: false
        type: "string"
        format: "date-time"
        description: "The end date you want the date filter to use"
        x-example: "2018-03-29"
      - name: "sort.field"
        in: "query"
        required: false
        type: "string"
        description: "Sort the returned list of bundles by"
        default: "last_uploaded"
        enum:
        - "created"
        - "last_revised"
        - "last_uploaded"
        - "title"
        x-example: "title"
      - name: "sort.value"
        in: "query"
        required: false
        type: "string"
        description: "What order to sort by"
        default: "dec"
        enum:
        - "asc"
        - "dec"
      - name: "exact_facet_match"
        in: "query"
        required: false
        type: "boolean"
        description: "[Reserved for future implementation] Only return content which\
          \ is *only* tagged with selected facets."
      - name: "language"
        in: "query"
        required: false
        type: "string"
        description: "Show only content in this language"
        x-example: "enus"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "object"
            properties:
              bundle_list:
                type: "array"
                items:
                  $ref: "#/definitions/Bundle"
              pagination_data:
                $ref: "#/definitions/paginationData"
  /bundle/{bundleid}:
    get:
      summary: "Load an individual bundle"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Bundle"
    parameters:
    - name: "bundleid"
      in: "path"
      required: true
      type: "string"
  /bundle/{bundleid}/files:
    get:
      summary: "List all files in bundle"
      parameters:
      - name: "language"
        in: "query"
        required: false
        type: "string"
        description: "Serve list to the bundle marked with this language tag"
        x-example: "enus"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              type: "string"
          examples:
            application/json: "List of URLs of the files in the bundle, consistent\
              \ with the filelist.xml."
      security:
      - Zoomin Generated Keys: []
    parameters:
    - name: "bundleid"
      in: "path"
      required: true
      type: "string"
  /bundle/{bundleid}/toc:
    get:
      summary: "List ToC for bundle"
      parameters:
      - name: "language"
        in: "query"
        required: false
        type: "string"
        description: "Serve list to the bundle marked with this language tag"
        x-example: "enus"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TocEntry"
      security:
      - Zoomin Generated Keys: []
    parameters:
    - name: "bundleid"
      in: "path"
      required: true
      type: "string"
  /bundle/{bundleid}/pdf:
    post:
      summary: "Initiate generation of a PDF for the entire bundle."
      description: "Initiate generation of a PDF for the entire publication. Processing\
        \ of the PDF happens asynchronously in the background. Creates a PDF job token\
        \ which can be used to check the status of PDF processing and to download\
        \ the PDF when processing is complete."
      parameters:
      - name: "with_toc"
        in: "query"
        required: false
        type: "boolean"
        description: "Include a TOC in the generated PDF if it contains more than\
          \ one topic. Default: false"
        x-example: "https://mysite.example.com/api/bundle/mymanual/pdf?with_toc=true"
      - name: "_LANG"
        in: "query"
        required: false
        type: "string"
        description: "An RFC 5646 language tag that specifies which language version\
          \ of the publication to use. Default: en-US"
        x-example: "https://mysite.example.com/api/bundle/mymanual/pdf?_LANG=es-MX"
      responses:
        200:
          description: "A background job to create the PDF has been successfully initiated."
          schema:
            required:
            - "job_token"
            type: "object"
            properties:
              job_token:
                type: "string"
                description: "A token that identifies the PDF generation job. The\
                  \ token can be used to check the status of PDF generation, and to\
                  \ obtain a download token that can be used to download the completed\
                  \ PDF."
    parameters:
    - name: "bundleid"
      in: "path"
      required: true
      type: "string"
  /bundle/bundleid/page: {}
  /bundle/{bundleid}/page/{navpath}:
    get:
      summary: "Access a topic"
      description: "The main path to get a topic"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Topic"
    parameters:
    - name: "bundleid"
      in: "path"
      required: true
      type: "string"
    - name: "navpath"
      in: "path"
      required: true
      type: "string"
  /bundle/{bundleid}/pdf/page/{navpath}:
    post:
      summary: "Initiate generation of a PDF for a single topic in a bundle"
      description: "Initiate generation of a PDF a single topic within a publication.\
        \ The children of the topic in the TOC can optionally be included. Processing\
        \ of the PDF happens asynchronously in the background. Creates a PDF job token\
        \ which can be used to check the status of PDF processing and to download\
        \ the PDF when processing is complete."
      parameters:
      - name: "with_child"
        in: "query"
        required: false
        type: "boolean"
        description: "Include all subtopics of the topic, as indicated in the TOC.\
          \ Default: false"
        x-example: "https://mysite.example.com/api/bundle/mymanual/pdf/page/mytopic.html?with_child=true"
      - name: "with_toc"
        in: "query"
        required: false
        type: "boolean"
        description: "Include a TOC in the generated PDF if it contains more than\
          \ one topic. Default: false"
        x-example: "https://mysite.example.com/api/bundle/mymanual/pdf/page/mytopic.html?with_toc=true"
      - name: "_LANG"
        in: "query"
        required: false
        type: "string"
        description: "An RFC 5646 language tag that specifies which language version\
          \ of the publication to use. Default: en-US"
        x-example: "https://mysite.example.com/api/bundle/mymanual/pdf/page/mytopic.html?_LANG=es-MX"
      responses:
        200:
          description: "Status 200"
          schema:
            required:
            - "job_token"
            type: "object"
            properties:
              job_token:
                type: "string"
    parameters:
    - name: "bundleid"
      in: "path"
      required: true
      type: "string"
    - name: "navpath"
      in: "path"
      required: true
      type: "string"
  /users/:
    get:
      summary: "Get list of Users"
      parameters:
      - name: "rpp"
        in: "query"
        required: true
        type: "integer"
        description: "Number of users to return in each page"
        x-example: 25
      - name: "page"
        in: "query"
        required: false
        type: "integer"
        description: "Number of the page to retrieve"
        x-example: 1
      - name: "name_filter.field"
        in: "query"
        required: false
        type: "string"
        description: "The name filter allows you to filter the returned list of bundles\
          \ based on a certain string match against the following field:"
        enum:
        - "name"
        - "email"
        x-example: "email"
      - name: "name_filter.value"
        in: "query"
        required: false
        type: "string"
        description: "The value to filter the “name” field by"
        x-example: "John"
      - name: "authentication_filter"
        in: "query"
        required: false
        type: "string"
        description: "The authentication filter allows you to filter users by the\
          \ authentication provider they are using to login to Zoomin."
        enum:
        - "internal_authentication"
        - "sso"
        - "http_headers"
        x-example: "internal_authentication"
      - name: "active_filter"
        in: "query"
        required: false
        type: "string"
        description: "The active filter allows you to filter active users vs. deactivated\
          \ users."
        enum:
        - "active"
        - "inactive"
        x-example: "active"
      - name: "sort.field"
        in: "query"
        required: false
        type: "string"
        description: "Sort the returned list of users by"
        enum:
        - "name"
        - "email"
        x-example: "Name"
      - name: "sort.value"
        in: "query"
        required: false
        type: "string"
        description: "What order to sort by"
        enum:
        - "asc"
        - "dec"
        x-example: "asc"
      - name: "date_filter.type"
        in: "query"
        required: false
        type: "string"
        description: "The date filter allows you to filter the returned list of users\
          \ based on their registration date or date of last login."
        enum:
        - "registered_on"
        - "last_login"
        x-example: "registered_on"
      - name: "date_filter.startValue"
        in: "query"
        required: false
        type: "string"
        format: "date-time"
        description: "The start date you want the date filter to use"
        x-example: "2018-03-27"
      - name: "date_filter.endValue"
        in: "query"
        required: false
        type: "string"
        format: "date-time"
        description: "The end date you want the date filter to use"
        x-example: "2018-03-29"
      - name: "role_filter"
        in: "query"
        required: false
        type: "string"
        description: "The role filter allows you to filter only users associated to\
          \ this role"
        x-example: "Employee"
      - name: "content_role_filter"
        in: "query"
        required: false
        type: "string"
        description: "The content role filter allows you to filter only users associated\
          \ to this content role"
        x-example: "Public"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "object"
            properties:
              user_list:
                type: "array"
                items:
                  $ref: "#/definitions/User"
              pagination_data:
                $ref: "#/definitions/paginationData"
    post:
      summary: "Create a new user"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "Status 201"
          schema:
            $ref: "#/definitions/User"
          examples:
            application/json: "The newly created user"
        422:
          description: "User already exists"
          schema:
            type: "string"
          examples:
            application/json: "User already exists"
  /users/{userid}:
    get:
      summary: "Get user"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
    put:
      summary: "Update user"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/User"
          examples:
            application/json: "The updated user"
        404:
          description: "User not found"
    delete:
      summary: "Delete user"
      parameters: []
      responses:
        200:
          description: "Will set the user to be active = false"
        401:
          description: "Status 401"
          schema:
            $ref: "#/definitions/Error"
    parameters:
    - name: "userid"
      in: "path"
      required: true
      type: "string"
  /admin/search_configuration/es_analyzer:
    get:
      summary: "Download"
      description: "Download a copy of a currently installed analyzer.\n\nRequired\
        \ permissions for this action: SearchConfiguration R/U"
      parameters:
      - name: "language"
        in: "query"
        required: false
        type: "string"
        description: "Specify a specific language code if you would like to obtain\
          \ a language specific-analyzer. Otherwise, the analyzer for the default\
          \ language (English) will be returned."
        x-example: "dede"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/searchAnalyzer"
      security:
      - Zoomin Generated Keys: []
    put:
      summary: "Update"
      description: "Replace an existing analyzer with a new one."
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/searchAnalyzer"
      responses:
        204:
          description: "Status 204"
      security:
      - Zoomin Generated Keys: []
  /admin/search_configuration/preferences:
    get:
      summary: "Load"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "object"
            properties:
              selectable:
                type: "array"
                description: "Returns the list of subject keys marked by an administrator\
                  \ as permitted for selection as search preferences."
                items:
                  $ref: "#/definitions/Subject"
                example: "[\"ver1\",\"ver3.5\"]"
              users_selected:
                type: "array"
                description: "Returns the list of subject keys already included by\
                  \ users in their individual search preferences."
                items:
                  $ref: "#/definitions/Subject"
      security:
      - Zoomin Generated Keys: []
    put:
      summary: "Update"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          type: "object"
          required:
          - "selectable_subjectkeys"
          properties:
            selectable_subjectkeys:
              type: "array"
              description: "Defines an array of strings representing the subject keys\
                \ which the administrator wishes end-users will be able to choose\
                \ from when configuring their search preferences."
              items:
                type: "string"
              example: "[\"ver1\",\"ver2\",\"ver3.5\"]"
          description: "Array of strings representing labelkeys"
      responses:
        204:
          description: "Status 204"
      security:
      - Zoomin Generated Keys: []
  /roles/:
    get:
      summary: "load the list of Roles"
      parameters:
      - name: "results_per_page"
        in: "query"
        required: false
        type: "integer"
        description: "Number of users to return in each page"
        x-example: 25
      - name: "page_number"
        in: "query"
        required: false
        type: "integer"
        description: "Number of the page to retrieve"
        x-example: 1
      - name: "name_filter"
        in: "query"
        required: false
        type: "string"
        description: "Return only roles whose name contains this string"
        x-example: "\"viewer\""
      responses:
        200:
          description: "Status 200"
          schema:
            type: "object"
            properties:
              role_list:
                type: "array"
                items:
                  $ref: "#/definitions/Role"
              pagination_data:
                $ref: "#/definitions/paginationData"
    post:
      summary: "Create a new role"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Role"
      responses:
        200:
          description: "Status 200"
  /roles/{roleid}:
    get:
      summary: "Load an individual role"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Role"
    put:
      summary: "Update a role"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Role"
      responses:
        200:
          description: "Status 200"
    delete:
      summary: "Delete a role"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Status 401"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Status 404"
        503:
          description: "Status 503"
    parameters:
    - name: "roleid"
      in: "path"
      required: true
      type: "string"
  /roles/{roleid}/users:
    get:
      summary: "Load list of users associated to a role"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
    parameters:
    - name: "roleid"
      in: "path"
      required: true
      type: "string"
  /profile/search_preferences:
    get:
      summary: "Load"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "object"
            properties:
              available:
                type: "array"
                description: "Returns the list of subject keys marked by an administrator\
                  \ as permitted for selection as search preferences."
                items:
                  $ref: "#/definitions/Subject"
              selected:
                type: "array"
                description: "Returns the list of subject keys marked by the end-user\
                  \ as its search preferences."
                items:
                  $ref: "#/definitions/Subject"
    put:
      summary: "Update"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          type: "object"
          properties:
            selected_subjectkeys:
              type: "array"
              description: "Defines an array of strings representing the subject keys\
                \ which the user wishes to configure as its search preferences."
              items:
                type: "string"
              example: "[\"ver2\"]"
      responses:
        204:
          description: "Status 204"
  /profile/my_watched_content:
    get:
      summary: "List"
      description: "Returns the list of topics and resources that the user is subscribed\
        \ to."
      parameters:
      - name: "rpp"
        in: "query"
        required: false
        type: "integer"
        x-example: 20
      - name: "page"
        in: "query"
        required: false
        type: "integer"
        x-example: 1
      - name: "q"
        in: "query"
        required: false
        type: "string"
        description: "Only display results matching this query."
        x-example: "shutdown"
      responses:
        200:
          description: "Status 200"
          schema:
            required:
            - "pagination"
            - "watchedContentItemGroups"
            type: "object"
            properties:
              pagination:
                $ref: "#/definitions/paginationData"
              watchedContentItemGroups:
                type: "array"
                description: "List of content items that the user is watching."
                items:
                  $ref: "#/definitions/WatchedContentInBundle"
  /taxonomy:
    get:
      summary: "Load"
      description: "Load tree of subjects from subject scheme"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            required:
            - "subjects"
            type: "object"
            properties:
              subjects:
                type: "array"
                items:
                  $ref: "#/definitions/TaxonomyObject"
                example: "[\n  {\n    \"subject\": {\n      \"subjectheadNavtitle\"\
                  : null,\n      \"navtitle\": \"Product\",\n      \"outputclasses\"\
                  : [],\n      \"key\": \"missingID\",\n      \"hidden\": false\n\
                  \    },\n    \"children\": [\n      {\n        \"subject\": {\n\
                  \          \"subjectheadNavtitle\": \"Product\",\n          \"navtitle\"\
                  : \"Web server\",\n          \"outputclasses\": [],\n          \"\
                  key\": \"server\",\n          \"hidden\": false\n        },\n  \
                  \      \"children\": []\n      },\n      {\n        \"subject\"\
                  : {\n          \"subjectheadNavtitle\": \"Product\",\n         \
                  \ \"navtitle\": \"Disk drive\",\n          \"outputclasses\": [],\n\
                  \          \"key\": \"disk\",\n          \"hidden\": false\n   \
                  \     },\n        \"children\": []\n      },\n      {\n        \"\
                  subject\": {\n          \"subjectheadNavtitle\": \"Product\",\n\
                  \          \"navtitle\": \"Database\",\n          \"outputclasses\"\
                  : [],\n          \"key\": \"database\",\n          \"hidden\": false\n\
                  \        },\n        \"children\": []\n      }\n    ]\n  },\n  {\n\
                  \    \"subject\": {\n      \"subjectheadNavtitle\": null,\n    \
                  \  \"navtitle\": \"Task\",\n      \"outputclasses\": [],\n     \
                  \ \"key\": \"missingID1\",\n      \"hidden\": false\n    },\n  \
                  \  \"children\": [\n      {\n        \"subject\": {\n          \"\
                  subjectheadNavtitle\": \"Task\",\n          \"navtitle\": \"Installation\"\
                  ,\n          \"outputclasses\": [],\n          \"key\": \"installing\"\
                  ,\n          \"hidden\": false\n        },\n        \"children\"\
                  : []\n      },\n      {\n        \"subject\": {\n          \"subjectheadNavtitle\"\
                  : \"Task\",\n          \"navtitle\": \"Configuration\",\n      \
                  \    \"outputclasses\": [],\n          \"key\": \"configuring\"\
                  ,\n          \"hidden\": false\n        },\n        \"children\"\
                  : []\n      },\n      {\n        \"subject\": {\n          \"subjectheadNavtitle\"\
                  : \"Task\",\n          \"navtitle\": \"Maintenance\",\n        \
                  \  \"outputclasses\": [],\n          \"key\": \"maintaining\",\n\
                  \          \"hidden\": false\n        },\n        \"children\":\
                  \ []\n      },\n      {\n        \"subject\": {\n          \"subjectheadNavtitle\"\
                  : \"Task\",\n          \"navtitle\": \"Troubleshooting\",\n    \
                  \      \"outputclasses\": [],\n          \"key\": \"troubleshooting\"\
                  ,\n          \"hidden\": false\n        },\n        \"children\"\
                  : []\n      }\n    ]\n  },\n  {\n    \"subject\": {\n      \"subjectheadNavtitle\"\
                  : null,\n      \"navtitle\": \"Role\",\n      \"outputclasses\"\
                  : [],\n      \"key\": \"missingID2\",\n      \"hidden\": false\n\
                  \    },\n    \"children\": [\n      {\n        \"subject\": {\n\
                  \          \"subjectheadNavtitle\": \"Role\",\n          \"navtitle\"\
                  : \"Installation technician\",\n          \"outputclasses\": [],\n\
                  \          \"key\": \"installer\",\n          \"hidden\": false\n\
                  \        },\n        \"children\": [\n          {\n            \"\
                  subject\": {\n              \"subjectheadNavtitle\": \"Role\",\n\
                  \              \"navtitle\": \"Hardware installation technician\"\
                  ,\n              \"outputclasses\": [],\n              \"key\":\
                  \ \"installerhw\",\n              \"hidden\": false\n          \
                  \  },\n            \"children\": []\n          },\n          {\n\
                  \            \"subject\": {\n              \"subjectheadNavtitle\"\
                  : \"Role\",\n              \"navtitle\": \"Software installation\
                  \ technician\",\n              \"outputclasses\": [],\n        \
                  \      \"key\": \"installersw\",\n              \"hidden\": false\n\
                  \            },\n            \"children\": []\n          }\n   \
                  \     ]\n      },\n      {\n        \"subject\": {\n          \"\
                  subjectheadNavtitle\": \"Role\",\n          \"navtitle\": \"Maintenance\
                  \ technician\",\n          \"outputclasses\": [],\n          \"\
                  key\": \"maintainer\",\n          \"hidden\": false\n        },\n\
                  \        \"children\": [\n          {\n            \"subject\":\
                  \ {\n              \"subjectheadNavtitle\": \"Role\",\n        \
                  \      \"navtitle\": \"Hardware maintenance technician\",\n    \
                  \          \"outputclasses\": [],\n              \"key\": \"maintainerhw\"\
                  ,\n              \"hidden\": false\n            },\n           \
                  \ \"children\": []\n          },\n          {\n            \"subject\"\
                  : {\n              \"subjectheadNavtitle\": \"Role\",\n        \
                  \      \"navtitle\": \"Software maintenance technician\",\n    \
                  \          \"outputclasses\": [],\n              \"key\": \"maintainersw\"\
                  ,\n              \"hidden\": false\n            },\n           \
                  \ \"children\": []\n          }\n        ]\n      }\n    ]\n  }\n\
                  ]"
  /contentrolegroups:
    get:
      summary: "Get all CRGs"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ContentRoleGroup"
    post:
      summary: "Create new CRG"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/ContentRoleGroup"
      responses:
        201:
          description: "Status 201"
          schema:
            $ref: "#/definitions/ContentRoleGroup"
  /contentrolegroup/{crgId}:
    get:
      summary: "Get CRG"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/ContentRoleGroup"
        404:
          description: "CRG was not found"
    put:
      summary: "Update CRG"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/ContentRoleGroup"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/ContentRoleGroup"
        404:
          description: "CRG not found"
    delete:
      summary: "Delete CRG"
      parameters: []
      responses:
        200:
          description: "Status 200"
    parameters:
    - name: "crgId"
      in: "path"
      required: true
      type: "integer"
  /article/{articleId}:
    get:
      summary: "Access a contributed Article"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Article"
    parameters:
    - name: "articleId"
      in: "path"
      required: true
      type: "string"
  /article/{articleid}/pdf:
    post:
      description: "Initiate generation of a PDF for an article. Processing of the\
        \ PDF happens asynchronously in the background. Creates a PDF job token which\
        \ can be used to check the status of PDF processing and to download the PDF\
        \ when processing is complete."
      parameters: []
      responses:
        200:
          description: "A background job to create the PDF has been successfully initiated."
          schema:
            required:
            - "job_token"
            type: "object"
            properties:
              job_token:
                type: "string"
                description: "A token that identifies the PDF generation job. The\
                  \ token can be used to check the status of PDF generation, and to\
                  \ obtain a download token that can be used to download the completed\
                  \ PDF."
    parameters:
    - name: "articleid"
      in: "path"
      required: true
      type: "string"
  /vote/{pageId}:
    put:
      summary: "Vote to like or dislike the specified content page"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/VoteAction"
      responses:
        204:
          description: "The vote was registered."
        401:
          description: "Not authorized to vote on this content."
        404:
          description: "The specified content doesn't exist or is not visible to the\
            \ client."
    delete:
      summary: "Delete an existing vote."
      parameters: []
      responses:
        204:
          description: "The vote was deleted."
        401:
          description: "Not authorized to vote on this page."
        404:
          description: "The specified content does not exist or is not visible to\
            \ this client."
    parameters:
    - name: "pageId"
      in: "path"
      required: true
      type: "string"
  /categories:
    get:
      summary: "Retrieve the forest-structure of category nodes"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CategoryNode"
  /mydocs/suggest/pdftitle:
    get:
      summary: "Suggest a PDF title based on selected MyDocs entries"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            required:
            - "hasMany"
            - "title"
            type: "object"
            properties:
              title:
                type: "string"
                description: "The suggested title for the PDF"
              hasMany:
                type: "boolean"
                description: "Indicates if the generated PDF will contain several\
                  \ topics"
  /mydocs/toc/move/{current}/{newParent}/{newPrevious}/{requestHash}:
    get:
      summary: "Move a ToC item to another place in the tree"
      parameters: []
      responses:
        303:
          description: "Redirects to Publications"
    parameters:
    - name: "current"
      in: "path"
      required: true
      type: "string"
    - name: "newParent"
      in: "path"
      required: true
      type: "string"
    - name: "newPrevious"
      in: "path"
      required: true
      type: "string"
    - name: "requestHash"
      in: "path"
      required: true
      type: "string"
  /mydocs/collections:
    get:
      summary: "Receive a list of collections"
      description: "Delivers the results in chunks of 50 items."
      parameters: []
      responses:
        200:
          description: "Status 200"
  /mydocs/collection/{collectionId}:
    get:
      summary: "Get this collection"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            required:
            - "collection"
            - "topics"
            type: "object"
            properties:
              collection:
                $ref: "#/definitions/Collection"
              topics:
                type: "array"
                items:
                  $ref: "#/definitions/FavTopic"
    post:
      summary: "Update this collection"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/CollectionPatch"
      responses:
        200:
          description: "Status 200"
          schema:
            required:
            - "default"
            - "rename"
            - "sortBy"
            - "unshare"
            type: "object"
            properties:
              rename:
                type: "string"
                description: "Was the collection renamed?"
              default:
                type: "boolean"
                description: "Was the collection set as default?"
              unshare:
                type: "boolean"
                description: "Was the collection unshared?"
              sortBy:
                type: "boolean"
                description: "FIXME not implemented"
    delete:
      summary: "Delete a collection"
      parameters: []
      responses:
        202:
          description: "Status 202"
          schema:
            required:
            - "currDefColl"
            type: "object"
            properties:
              currDefColl:
                type: "integer"
                description: "The collection that is the default after this request."
    parameters:
    - name: "collectionId"
      in: "path"
      required: true
      type: "string"
  /mydocs/collection/{collectionId}/topic/{pubNavNumber}:
    get:
      summary: "Return a list of topics on one level from one parent"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            required:
            - "deductCount"
            - "html"
            type: "object"
            properties:
              deductCount:
                type: "integer"
              html:
                type: "string"
                description: "Widget containing topics"
    put:
      summary: "Add a new topic to a collection"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/NewTopic"
      responses:
        200:
          description: "Status 200"
    delete:
      summary: "Delete a topic from a collection"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            required:
            - "newCollCount"
            type: "object"
            properties:
              newCollCount:
                type: "integer"
                description: "The new number of topics in the collection"
    parameters:
    - name: "collectionId"
      in: "path"
      required: true
      type: "string"
    - name: "pubNavNumber"
      in: "path"
      required: true
      type: "string"
  /mydocs/info/collection/{collectionId}/topic/{path}:
    get:
      summary: "Return information on this specific topic."
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "object"
            properties:
              topic:
                type: "string"
    parameters:
    - name: "collectionId"
      in: "path"
      required: true
      type: "string"
    - name: "path"
      in: "path"
      required: true
      type: "string"
  /mydocs/new/collection/{title}:
    put:
      summary: "Create a new Collection"
      parameters: []
      responses:
        201:
          description: "The Collection was created."
          schema:
            required:
            - "html"
            type: "object"
            properties:
              html:
                type: "string"
                description: "An HTML snippet representing the new Collection in the\
                  \ user interface."
          headers:
            NewId:
              type: "integer"
              description: "The ID of the new collection."
              x-example: 37
            Location:
              type: "string"
              description: "The URL of the created collection."
              x-example: "https://docs.yourcompany.com/api/mydocs/collection/37"
        400:
          description: "Failed to create the new Collection for an unknown reason."
    parameters:
    - name: "title"
      in: "path"
      required: true
      type: "string"
  /mydocs/article/collection/{collectionId}/{path}:
    get:
      summary: "Get an article as HTML"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            required:
            - "addedOn"
            - "attachments"
            - "content"
            - "title"
            - "type"
            - "views"
            type: "object"
            properties:
              content:
                type: "string"
              title:
                type: "string"
              addedOn:
                type: "integer"
                description: "Days since the item was added"
              rating:
                type: "number"
              views:
                type: "integer"
              attachments:
                type: "array"
                items:
                  $ref: "#/definitions/Attachment"
              allAttachments:
                type: "string"
                description: "URL to fetch all attachments"
              allTopicAttachments:
                type: "string"
                description: "URL to fetch all topic attachments"
              topicMeta:
                type: "string"
                description: "FIXME datatype not clear: Meta information per topic"
              type:
                type: "string"
                enum:
                - "HTML"
                - "resource"
                - "error"
              html:
                type: "string"
                description: "HTML content if type is HTML"
              resource:
                type: "string"
                description: "Resource URL if type is resource"
    parameters:
    - name: "collectionId"
      in: "path"
      required: true
      type: "string"
    - name: "path"
      in: "path"
      required: true
      type: "string"
  /mydocs/pdf/title:
    post:
      summary: "Get PDF title"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          type: "object"
          required:
          - "pdf"
          properties:
            pdf:
              $ref: "#/definitions/FavPdf"
      responses:
        200:
          description: "Status 200"
          schema:
            required:
            - "hasManyBundles"
            - "title"
            type: "object"
            properties:
              title:
                type: "string"
                description: "The title of the PDF."
              hasManyBundles:
                type: "boolean"
                description: "Indicates if this PDF has contents from several bundles."
  /mydocs/pdf/:
    post:
      summary: "Generate a PDF document"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/FavPdf"
      responses:
        200:
          description: "Status 200"
  /mydocs/move/{collectionId}/{pubNavNumber}/{newParent}/{newPrevious}/{requestHash}:
    post:
      summary: "Move a Fav item to another place in the tree"
      description: "The request hash is a number from the database used to make sure\
        \ that the request is based on current data. This is done by comparing the\
        \ reqHash value in the request to the value in the database for that specific\
        \ Fav item. If the two values don't match, the handler returns a HTTP status\
        \ 400."
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            required:
            - "newHash"
            type: "object"
            properties:
              newHash:
                type: "string"
                description: "The new hash number as a string, prefixed by X."
                example: "X54"
    parameters:
    - name: "collectionId"
      in: "path"
      required: true
      type: "string"
    - name: "pubNavNumber"
      in: "path"
      required: true
      type: "string"
    - name: "newParent"
      in: "path"
      required: true
      type: "string"
    - name: "newPrevious"
      in: "path"
      required: true
      type: "string"
    - name: "requestHash"
      in: "path"
      required: true
      type: "string"
  /mydocs/share/users:
    get:
      summary: "List users to send the invite to"
      parameters:
      - name: "q"
        in: "query"
        required: true
        type: "string"
        description: "Query term to filter users. Must be at least a certain number\
          \ of characters long. The exact number depends on configuration."
        x-example: "john"
      responses:
        200:
          description: "A list of tuples containing (name, email) for each user."
        400:
          description: "This is returned if the query string is too short."
  /mydocs/share/invite/cleanup/{cutoffDate}:
    post:
      summary: "FIXME not implemented"
      parameters: []
      responses:
        200:
          description: "Status 200"
    parameters:
    - name: "cutoffDate"
      in: "path"
      required: true
      type: "string"
  /mydocs/share/invite/{inviteId}:
    delete:
      summary: "Delete this invitation"
      parameters: []
      responses:
        200:
          description: "Status 200"
    parameters:
    - name: "inviteId"
      in: "path"
      required: true
      type: "string"
  /mydocs/share/collection/{collectionId}:
    get:
      summary: "Get shared Collections list in chunks of 50 items."
      parameters: []
      responses:
        200:
          description: "Status 200"
    delete:
      summary: "Unsubscribe from a shared Collection"
      parameters: []
      responses:
        200:
          description: "Status 200"
    parameters:
    - name: "collectionId"
      in: "path"
      required: true
      type: "string"
  /mydocs/share/{sharedCollectionId}/topic/{pubNavNumber}:
    get:
      summary: "Get items from one level"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            required:
            - "deductCount"
            - "html"
            type: "object"
            properties:
              deductCount:
                type: "integer"
                description: "FIXME guess: Number of topics the user did not have\
                  \ access to."
              html:
                type: "string"
                description: "HTML snippet"
    parameters:
    - name: "sharedCollectionId"
      in: "path"
      required: true
      type: "string"
    - name: "pubNavNumber"
      in: "path"
      required: true
      type: "string"
  /mydocs/invite/accept/{inviteId}:
    get:
      summary: "Accept this invitation"
      description: "This request will cause changes in the database. However, since\
        \ it is shared as a link in an email, it has to be a GET request nonetheless."
      parameters: []
      responses:
        200:
          description: "Status 200"
    parameters:
    - name: "inviteId"
      in: "path"
      required: true
      type: "string"
  /pdf/{jobtoken}/status:
    get:
      summary: "Check the status of a PDF generation job"
      description: "Check the status of a PDF generation job. `{jobtoken}` is the\
        \ token that was provided when the PDF generation job was initiated."
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            required:
            - "status"
            type: "object"
            description: "The current status of the PDF generation job, and a download\
              \ token if the job is complete."
            properties:
              status:
                type: "string"
                description: "The current status of the PDF generation job. Possible\
                  \ values: `JobDone`, `JobFailed`, `JobInProgress`, `JobInQueue`,\
                  \ `JobUnknown`"
              download_token:
                type: "string"
                description: "A token that can be used to download the completed PDF.\
                  \ Only provided if the status is `JobDone`. The download token expires\
                  \ within a short time after it is issued and must be used immediately."
    parameters:
    - name: "jobtoken"
      in: "path"
      required: true
      type: "string"
  /pdf/{jobtoken}/download:
    get:
      summary: "Download a generated PDF"
      description: "Download PDF content that has been generated in the background.\
        \ Requires the job token that was provided when the generation of the PDF\
        \ was initiated, and the download token that was provided when the status\
        \ of the PDF generation job was reported as `PDFDone`."
      produces:
      - "application/pdf"
      parameters:
      - name: "download_token"
        in: "query"
        required: true
        type: "string"
        description: "The download token that was provided when the status of this\
          \ PDF generation job was reported as `PDfDone`"
        x-example: "https://mysite.example.com/api/pdf/jjjjjj/download?download_token=tttttt"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "object"
            description: "The generated PDF, as a download."
      security: []
    parameters:
    - name: "jobtoken"
      in: "path"
      required: true
      type: "string"
securityDefinitions:
  Zoomin Generated Keys:
    type: "apiKey"
    name: "timestamp"
    in: "query"
definitions:
  Search Result:
    type: "object"
    required:
    - "dates"
    - "dislikes"
    - "likes"
    - "snippet"
    - "title"
    - "type"
    - "url"
    properties:
      title:
        type: "string"
        description: "Title of Search result"
        example: "Information Model"
      url:
        type: "string"
        description: "Direct link to access this result's endpoint"
      snippet:
        type: "string"
        description: "HTML snippet of search result"
        example: "The Information Model defines the structured authoring environment\
          \ used to create product documentation."
      publication_title:
        type: "string"
        description: "Publication title for this result"
        example: "Codec Installation Guide"
      score:
        type: "number"
        description: "Search engine relevance score"
        example: 34.98
      type:
        type: "string"
        description: "Type of search result"
        enum:
        - "html_topic"
        - "nonhtml_file"
        - "contributed_article"
        - "contributed_video"
        example: "html_topic"
      dates:
        $ref: "#/definitions/Dates"
      views:
        type: "integer"
        description: "[reserved for future use] Number of this result was viewed"
        example: 55
      rating:
        type: "number"
        description: "Average rating of this result (on a scale of 1-5)"
        example: 2.3
      labels:
        type: "array"
        description: "Tree of taxonomy objects which apply to this bundle."
        items:
          $ref: "#/definitions/Subject"
      language:
        type: "string"
        description: "Language code for this content"
        example: "enus"
      mimetype:
        type: "string"
        description: "Default mimetype of this result (only for type: nonhtml_file)"
        example: "application/pdf"
      likes:
        type: "integer"
        description: "Number of \"likes\" for this topic"
      dislikes:
        type: "integer"
        description: "Number of \"dislikes\" for this topic"
      bundle_id:
        type: "string"
        description: "Id for the publication to which this topic belongs. Only for\
          \ 'html_topic' and 'nonhtml_file' types."
        example: "HTML_for_Review"
      page_id:
        type: "string"
        description: "Path within the publication to this topic. For 'html_topic'\
          \ and 'nonhtml_file' types,  this represents the 'navpath' of the result.\
          \ For 'contributed_article' results, this represents the 'articleId'."
        example: "Content/Contracts/00_Contract_Life_Cycle_Management.htm"
      expiration_date:
        type: "string"
        format: "date-time"
        description: "Expiration date of article. Only for 'contributed_article' type."
    description: "An object encapsulating a result for a specific search."
  Clustered Result:
    type: "object"
    required:
    - "leading_result"
    properties:
      leading_result:
        $ref: "#/definitions/Search Result"
      follower_result:
        type: "array"
        description: "One or more \"follower\" results which will appear alongside\
          \ the leading result"
        items:
          $ref: "#/definitions/Search Result"
      highlighted_snippet:
        type: "string"
        description: "HTML snippet of search result"
        example: "The Information Model defines the structured authoring environment\
          \ used to create product documentation."
    description: "Search results with identical titles that exist across multiple\
      \ bundles may be clustered together, based on the platform configuration."
  Search Results:
    type: "object"
    required:
    - "Pagination"
    - "Results"
    properties:
      Results:
        type: "array"
        description: "Results for this search"
        items:
          $ref: "#/definitions/Clustered Result"
      Pagination:
        $ref: "#/definitions/paginationData"
      did_you_mean:
        type: "array"
        description: "In case of no results, the platform may propose one or more\
          \ alternative terms that are likely to yield better results, sorted by order\
          \ of relevancy."
        items:
          type: "string"
  Bundle:
    type: "object"
    required:
    - "dates"
    - "name"
    - "title"
    - "type"
    properties:
      name:
        type: "string"
        description: "The bundle name is a unique identifier that is used as part\
          \ of the url (/bundle/{name})"
        example: "AISuite_230_ConceptsGuide_allOS_en_HTML5"
      title:
        type: "string"
        description: "The bundle title is a human readable name presented to the viewer"
        example: "AI Suite 2.3.0 Concepts Guide"
      type:
        type: "string"
        description: "Defines the type of the returned bundle:\nHTMLBundle: Standard\
          \ publication bundle converted to HTML5\nResourceBundle: Bundle consisting\
          \ of various non-HTML file formats, e.g. PDF or Word."
        enum:
        - "HTMLBundle"
        - "ResourceBundle"
        example: "HTMLBundle"
      dates:
        $ref: "#/definitions/Dates"
      attachments:
        type: "object"
        description: "Returns a direct link to this bundle’s attachments if exist."
        properties:
          bundle_attachments:
            type: "array"
            description: "Array of individual attachments."
            items:
              $ref: "#/definitions/BundleAttachment"
          all_attachments:
            type: "string"
            description: "URL to download all attachments as a single Zip file"
            example: "docs.zoominsoftware.io/bundle/publication_name/allattach"
      preprocessed_PDF:
        type: "string"
        description: "Download link to a pre-processed PDF version of this bundle\
          \ if exists."
      metadata:
        type: "array"
        description: "Returns any metadata records specified for the bundle."
        items:
          type: "object"
          properties:
            key:
              type: "string"
              description: "Metadata key"
              example: "Author"
            value:
              type: "string"
              description: "Metadata value"
              example: "Jane Austin"
      labels:
        type: "array"
        description: "Tree of taxonomy objects which apply to this bundle."
        items:
          $ref: "#/definitions/Subject"
      homepage:
        type: "string"
        description: "Returns a link to the homepage topic of the bundle if set."
      canonical_bundle:
        type: "string"
        description: "Bundle name of the bundle set as being canonical to the current\
          \ bundle."
        example: "AISuite_250_ConceptsGuide_allOS_en_HTML5"
      language:
        type: "string"
        description: "Language of this bundle"
        example: "enus"
    description: "Represents a content bundle in the system."
  BundleAttachment:
    type: "object"
    required:
    - "filename"
    - "url"
    properties:
      filename:
        type: "string"
        description: "The name of the attachment file"
        example: "sample.jpg"
      url:
        type: "string"
        description: "Attachment download url"
        example: "docs.zoominsoftware.io/bundle/publication_name/attach/filename.jpg"
    description: "Bundle Attachment is a file that can be attached to a bundle."
  Topic:
    type: "object"
    required:
    - "breadcrumbs_html"
    - "bundle_title"
    - "dates"
    - "dislikes"
    - "keywords"
    - "likes"
    - "title"
    - "topic_html"
    - "views"
    properties:
      title:
        type: "string"
        description: "Title of this topic"
      topic_html:
        type: "string"
        description: "HTML of this topic"
      breadcrumbs_html:
        type: "string"
        description: "HTML of the breadcrumbs of this topic"
      views:
        type: "integer"
        description: "Number of views of this topic"
      dates:
        $ref: "#/definitions/Dates"
      like_url:
        type: "string"
        description: "Link to \"like\" this topic"
      dislike_url:
        type: "string"
        description: "Link to \"dislike\" this topic"
      likes:
        type: "integer"
        description: "Number of \"likes\" for this topic"
      dislikes:
        type: "integer"
        description: "Number of \"dislikes\" for this topic"
      rating:
        type: "number"
        description: "Average rating of this topic (out of 5)"
      metadata:
        type: "object"
        description: "Object of metadata of this topic\nNote - is controlled by the\
          \ \"include-filelist-metas\" settings parameter."
        example: "\"metadata\": {\n        \"prodname\": \"ANNC\",\n        \"draftcomment\"\
          : \"print\",\n        \"bundle\": \"m_AN1551_COFTokenization\"\n    }"
      '[unimplemented] labels':
        type: "array"
        description: "Tree of labels which apply to this topic"
        items:
          $ref: "#/definitions/Subject"
      labels_text:
        type: "string"
        description: "Textual representation of the tree of labels which apply to\
          \ this topic"
      keywords:
        type: "array"
        description: "Array of keywords for this topic"
        items:
          type: "string"
      attachments:
        type: "object"
        description: "The files attached to this topic."
        properties:
          topic_attachments:
            type: "array"
            description: "Array of individual attachments."
            items:
              $ref: "#/definitions/BundleAttachment"
          all_attachments:
            type: "string"
            description: "URL to download all attachments as a single zip file."
            example: "https://docs.zoominsoftware.io/bundle/publication_name/alltopicattach/intro.html"
      bundle_title:
        type: "string"
        description: "Title of bundle containing this topic"
        example: "AI Suite 3.1 User Manual"
    description: "An object representing a topic in a bundle."
  User:
    type: "object"
    required:
    - "active"
    - "email"
    - "id"
    - "role_name"
    properties:
      id:
        type: "number"
        description: "User id"
      email:
        type: "string"
        description: "The user email address"
        example: "john.doe@acme.com"
      name:
        type: "string"
        description: "The user full name"
      auth_source:
        type: "string"
        description: "Defines which authentication source (iDP) was used to register\
          \ this user"
      active:
        type: "boolean"
        description: "Indicates if the user is active or disabled in the system."
        default: true
      has_api_key:
        type: "boolean"
        description: "Indicates if the user has an active API key defined"
        example: false
      permissions_overridden:
        type: "boolean"
        description: "Indicates whether or not the user permissions have been manually\
          \ altered"
        example: false
      registered_at:
        type: "string"
        format: "date-time"
        description: "Indicates when the user was first registered in the system"
      last_login_at:
        type: "string"
        format: "date-time"
        description: "Indicates when the user last logged into the system"
      role_name:
        type: "string"
        description: "Indicates the functional role assigned to the user"
      content_role_names:
        type: "array"
        description: "Indicates the content roles assigned to the user"
        items:
          type: "string"
    description: "Represents a single user in the system."
  Error:
    type: "object"
    required:
    - "code"
    properties:
      code:
        type: "integer"
        minimum: 400
        maximum: 599
      description:
        type: "string"
        example: "Bad query parameter [$size]: Invalid integer value [abc]"
    description: "This general error structure is used throughout this API."
    example: "{\n  \"code\": 400,\n  \"description\": \"Bad query parameter [$size]:\
      \ Invalid integer value [abc]\",\n  \"reasonPhrase\": \"Bad Request\"\n}"
  Dates:
    type: "object"
    required:
    - "Added on"
    properties:
      Added on:
        type: "string"
        format: "date-time"
        description: "Time this topic was added\n\nTime this topic was added"
      Created on:
        type: "string"
        format: "date-time"
        description: "Time this topic was created"
      Updated on:
        type: "string"
        format: "date-time"
        description: "Time this topic was updated"
    description: "Object to encapsulate dates for a topic"
  paginationData:
    type: "object"
    required:
    - "page_number"
    - "results_per_page"
    - "total_count"
    - "total_pages"
    properties:
      results_per_page:
        type: "integer"
        description: "Results being displayed per page"
      page_number:
        type: "integer"
        description: "Current page"
      total_pages:
        type: "integer"
        description: "Total number of pages for this query"
      total_count:
        type: "integer"
        description: "Total number of hits for this query"
      next_page:
        type: "string"
        description: "link to next page"
      previous_page:
        type: "string"
        description: "link to previous page"
  Watermark:
    type: "object"
    required:
    - "active"
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        description: "Watermark id"
      name:
        type: "string"
        description: "Human readable name"
      active:
        type: "boolean"
        description: "Indicates if the watermark is active or disabled in the system"
      priority:
        type: "integer"
        description: "The priority of the watermark compared to other watermarks in\
          \ the system"
      description:
        type: "string"
        description: "Watermark description"
      created_at:
        type: "string"
        format: "date-time"
        description: "Time of watermark creation"
      last_updated_at:
        type: "string"
        format: "date-time"
        description: "Time the watermark was last updated"
      html_text:
        type: "string"
        description: "Text used to present the watermark in html topic pages"
      pdf_text:
        type: "string"
        description: "Text used to present the watermark when interpolated into pdf\
          \ outputs"
      subjects:
        type: "array"
        description: "Defines which subjects the content needs to be classified with\
          \ in order to present this watermark."
        items:
          $ref: "#/definitions/Subject"
    description: "Defines a dynamic watermark entity."
  Campaign:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Campaign id"
      name:
        type: "string"
        description: "Human readable name"
      active:
        type: "boolean"
        description: "Indicates if the campaign is active or disabled in the system"
      priority:
        type: "integer"
        description: "The priority of the campaign compared to other campaigns in\
          \ the system"
      description:
        type: "string"
        description: "Campaign description"
      created_at:
        type: "string"
        format: "date-time"
        description: "Time of campaign creation"
      last_updated_at:
        type: "string"
        format: "date-time"
        description: "Time the campaign was last updated"
      type:
        type: "string"
        description: "Defines the visual output of the campaign: either center-screen\
          \ popup or a top bar"
        enum:
        - "popup"
        - "topbar"
      languages:
        type: "array"
        description: "If not null, the campaign would only be presented to users whose\
          \ browser locale is set to one of these languages"
        items:
          $ref: "#/definitions/language"
      start_date:
        type: "string"
        format: "date-time"
        description: "Time of campaign start (in UTC)"
      end_date:
        type: "string"
        format: "date-time"
        description: "Time of campaign end (in UTC)"
      html:
        type: "string"
        description: "The actual html of the campaign"
      css_file:
        type: "string"
        format: "binary"
        description: "Optional css to style the campaign html"
      background_image:
        type: "string"
        format: "binary"
        description: "Optional background image which would be used as a background\
          \ to the campaign"
      url:
        type: "string"
        description: "Click-thru url that the campaign banner would redirect to once\
          \ clicked"
      subjects:
        type: "array"
        description: "The campaign would only be presented to users associated with\
          \ the content roles appearing in this array"
        items:
          $ref: "#/definitions/ContentRoleGroup"
    description: "Represents a campaign or announcement in the system."
  Sitemap:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Sitemap name"
      map:
        type: "string"
        format: "binary"
        description: "Sitemap file (compatible with the Sitemap protocol)"
    description: "Defines the SEO sitemap(s)"
  Content:
    type: "object"
    properties:
      id:
        type: "string"
      type:
        type: "string"
        enum:
        - "topic"
        - "resourcefile"
        - "how-to"
        - "video"
      bundle:
        $ref: "#/definitions/Bundle"
      title:
        type: "string"
      shortdesc:
        type: "string"
      body:
        type: "string"
    description: "Represents a piece of content in the system"
  language:
    type: "object"
    required:
    - "code"
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        description: "Database id for this language"
      code:
        type: "string"
        description: "Language code"
        example: "en-us"
      name:
        type: "string"
        description: "Language name"
        example: "English"
    description: "Defines a valid language in the system"
  TocEntry:
    type: "object"
    required:
    - "bundle_id"
    - "title"
    properties:
      title:
        type: "string"
        description: "Human readable title for the table of content"
        example: "Server configuration"
      url:
        type: "string"
        description: "Url to the specific page of this content."
        example: "https://docs.acme.com/bundle/bundle23/page/server_configuration_desc.html"
      childEntries:
        type: "array"
        description: "Child nodes of this entry in the table of contents."
        items:
          $ref: "#/definitions/TocEntry"
      bundle_id:
        type: "string"
        description: "The ID of the bundle of the TOC entry"
        example: "bundle23"
      nav_path:
        type: "string"
        description: "The nav path to the TOC entry."
        example: "server_configuration_desc.html"
    description: "Represents a single node in a table of contents."
  searchAnalyzer:
    type: "object"
    required:
    - "analyzer_json"
    properties:
      analyzer_json:
        type: "object"
        description: "The elasticsearch analyzer file specified in the system"
      language:
        type: "string"
        description: "The content language this analyzer applies to"
    description: "Represents the Elasticsearch analyzer used in the system."
  Role:
    type: "object"
    required:
    - "id"
    - "includedPermissions"
    - "name"
    properties:
      id:
        type: "integer"
        description: "Role id"
      name:
        type: "string"
        description: "Role name"
      description:
        type: "string"
        description: "Textual description of the role"
      includedPermissions:
        type: "array"
        description: "Contained permissions in this role"
        items:
          $ref: "#/definitions/Permission"
    description: "Defines a functional role in the system."
  Permission:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        description: "Permission id"
      name:
        type: "string"
        description: "Permission name"
      type:
        type: "string"
        description: "Indicates the CRUD (create, read, update, delete) functionality."
        enum:
        - "C"
        - "R"
        - "U"
        - "D"
    description: "Represents a single permission in the system"
  WatchedContentItem:
    type: "object"
    required:
    - "dates"
    - "itemTitle"
    - "itemUrl"
    - "subjects"
    properties:
      itemTitle:
        type: "string"
        description: "Title of this resource/topic"
      itemUrl:
        type: "string"
        description: "Link to the resource/topic"
      dates:
        $ref: "#/definitions/Dates"
      subjects:
        type: "array"
        description: "Tree of subjects which apply to this resource/topic"
        items:
          $ref: "#/definitions/Subject"
    description: "An object representing subscription to a specific resource or topic."
  WatchedContentInBundle:
    type: "object"
    required:
    - "bundleTitle"
    - "bundleType"
    - "bundleUrl"
    - "watchedItems"
    properties:
      bundleType:
        type: "string"
        description: "Defines the type of the returned bundle: HTMLBundle: Standard\
          \ publication bundle converted to HTML5 ResourceBundle: Bundle consisting\
          \ of various non-HTML file formats, e.g. PDF or Word."
        enum:
        - "HTMLBundle"
        - "ResourceBundle"
        example: "HTMLBundle"
      bundleTitle:
        type: "string"
        description: "The bundle title is a human readable name presented to the viewer"
      bundleUrl:
        type: "string"
        description: "URL to the bundle hosting the watched content."
      watchedItems:
        type: "array"
        items:
          $ref: "#/definitions/WatchedContentItem"
  Subject:
    type: "object"
    required:
    - "hidden"
    - "key"
    - "navtitle"
    - "outputclasses"
    properties:
      key:
        type: "string"
        description: "Unique identifier from the subject scheme."
      navtitle:
        type: "string"
        description: "Human readable title"
      subjectheadNavtitle:
        type: "string"
        description: "Human readable title of the containing subjecthead - if this\
          \ facet is itself a subjecthead, this will be 'null'."
      hidden:
        type: "boolean"
        description: "Indicates if the subject is defined as hidden in the subject\
          \ scheme"
      outputclasses:
        type: "array"
        description: "What non-magical outputclasses apply to this subject."
        items:
          type: "string"
    description: "Represents a single facet in the system taxonomy"
  TaxonomyObject:
    type: "object"
    required:
    - "subject"
    properties:
      subject:
        $ref: "#/definitions/Subject"
      children:
        type: "array"
        description: "Descendants of this node"
        items:
          $ref: "#/definitions/TaxonomyObject"
  ContentRoleGroup:
    type: "object"
    required:
    - "id"
    - "includedSubjects"
    - "name"
    properties:
      id:
        type: "integer"
        description: "Content role id"
      name:
        type: "string"
        description: "Content role name"
      includedSubjects:
        type: "array"
        description: "The list of included subjects in this content role"
        items:
          $ref: "#/definitions/Subject"
    description: "Represents a single content role group in the system."
  Article:
    type: "object"
    required:
    - "article_id"
    - "dates"
    - "dislikes"
    - "html"
    - "keywords"
    - "labels"
    - "likes"
    - "title"
    - "views"
    properties:
      article_id:
        type: "string"
        description: "Id of this article"
        example: "bd4ceac2"
      title:
        type: "string"
        description: "Title of this article"
        example: "SME Article Title"
      html:
        type: "string"
        description: "HTML of this article"
        example: "<p>First para.</p>\n<p>Second para.</p>"
      views:
        type: "integer"
        description: "Number of views of this article"
      dates:
        $ref: "#/definitions/Dates"
      like_url:
        type: "string"
        description: "Link to “like” this article"
      dislike_url:
        type: "string"
        description: "Link to “dislike” this article"
      likes:
        type: "integer"
        description: "Number of “likes” for this article"
      dislikes:
        type: "integer"
        description: "Number of “dislikes” for this article"
      rating:
        type: "number"
        description: "Average rating of this article (out of 5)"
      labels:
        type: "array"
        description: "List of labels which apply to this article"
        items:
          $ref: "#/definitions/Subject"
      labels_text:
        type: "string"
        description: "Textual representation of the tree of labels which apply to\
          \ this article"
      keywords:
        type: "array"
        description: "Array of keywords for this article"
        items:
          type: "string"
        example: "[\"server\",\"cluster\",\"prototype\"]"
      expiration_date:
        type: "string"
        format: "date"
        description: "Expiration date of this article"
        example: "2019-05-22"
  VoteAction:
    type: "object"
    required:
    - "vote"
    properties:
      vote:
        type: "string"
        description: "\"like\" or \"dislike\""
        enum:
        - "like"
        - "dislike"
    example: "{\n    \"vote\": \"like\"\n}"
  CategoryNode:
    type: "object"
    required:
    - "[TBD] prettyLink"
    - "children"
    - "linkText"
    - "nodeType"
    - "outputclass"
    - "route"
    - "subLinks"
    properties:
      nodeType:
        type: "string"
        description: "Type of Node"
        enum:
        - "NodeCategory"
        - "NodeBundle"
        - "NodeLink"
        - "NodeSearch"
      outputclass:
        type: "array"
        description: "Outputclass values for this link"
        items:
          type: "string"
      route:
        type: "string"
        description: "Route to access this node (search, bundle or category)"
      '[TBD] prettyLink':
        type: "string"
      description:
        type: "string"
        description: "Description of this node"
      id:
        type: "string"
        description: "Id (slug) of this node"
      icon:
        type: "string"
        description: "Icon name of this node"
      linkText:
        type: "string"
        description: "Linktext (title) of this node"
      checkedFacets:
        type: "array"
        items:
          type: "string"
      subLinks:
        type: "array"
        description: "CategoryLinks of this node"
        items:
          $ref: "#/definitions/CategoryLink"
      children:
        type: "array"
        description: "Subnodes of this node"
        items:
          $ref: "#/definitions/CategoryNode"
  CategoryLink:
    type: "object"
    required:
    - "linkText"
    - "outputclass"
    - "route"
    properties:
      linkText:
        type: "string"
        description: "Text to display for this link"
      route:
        type: "string"
        description: "URL of this link"
      outputclass:
        type: "array"
        description: "Outputclass values for this link"
        items:
          type: "string"
    description: "Links shown in a category box"
  Attachment:
    type: "object"
    required:
    - "mimeType"
    - "name"
    - "url"
    properties:
      name:
        type: "string"
      mimeType:
        type: "string"
      url:
        type: "string"
  Collection:
    type: "object"
    properties:
      topics:
        type: "array"
        items:
          type: "string"
      collection:
        type: "object"
        properties:
          stateHash:
            type: "number"
          owner:
            type: "number"
          title:
            type: "string"
          isDefault:
            type: "boolean"
    example: "{\"topics\":[],\"collection\":{\"stateHash\":0,\"owner\":1,\"title\"\
      :\"Default Collection\",\"isDefault\":false}}"
  CollectionPatch:
    type: "object"
    required:
    - "cpIsDefault"
    - "cpNewName"
    properties:
      cpNewName:
        type: "string"
        description: "New name of the collection"
      cpIsDefault:
        type: "boolean"
        description: "Is this the default?"
      cpShareWith:
        type: "array"
        description: "Who to share this collection with"
        items:
          type: "string"
      cpSortBy:
        type: "string"
        enum:
        - "CSAlpha"
        - "CSCount"
      cpUnshare:
        type: "boolean"
        description: "Unshare this collection?"
  CollectionReq:
    type: "object"
    required:
    - "crFilter"
    - "crHtmlOnly"
    - "crItemsPerPage"
    - "crPage"
    - "crSortBy"
    - "crWithCounts"
    properties:
      crWithCounts:
        type: "boolean"
      crFilter:
        type: "string"
      crPage:
        type: "integer"
      crItemsPerPage:
        type: "integer"
      crHtmlOnly:
        type: "boolean"
      crSortBy:
        type: "string"
        enum:
        - "CSAlpha"
        - "CSCount"
  FavItem:
    type: "object"
  FavItemType:
    type: "string"
    enum:
    - "FITTopic"
    - "FITBundle"
    - "FITHowto"
  FavPdf:
    type: "object"
    required:
    - "fpCollId"
    - "fpHasMany"
    - "fpTitle"
    - "fpToC"
    properties:
      fpCollId:
        type: "integer"
        description: "523"
      fpTitle:
        type: "string"
      fpToC:
        type: "boolean"
        description: "Include table of contents."
      fpCustom:
        type: "string"
      fpHasMany:
        type: "boolean"
      fpTopics:
        type: "array"
        description: "FIXME type should be array of tuple"
        items:
          type: "object"
    description: "A data type used in the request to generate a PDF."
  FavTopic:
    type: "object"
    required:
    - "topicId"
    - "topicNumber"
    - "topicTitle"
    - "topicType"
    properties:
      topicParent:
        type: "integer"
      topicTitle:
        type: "string"
      topicId:
        type: "integer"
      topicNumber:
        type: "integer"
      topicPrevious:
        type: "integer"
      topicContent:
        type: "string"
      topicType:
        $ref: "#/definitions/FavItemType"
    example: "{\"topicParent\":null,\"topicTitle\":\"Sample Preface\",\"topicId\"\
      :68,\"topicNumber\":37,\"topicPrevious\":null,\"topicContent\":\"bundle:test-prod/enus/taskbook/task_preface.html\"\
      ,\"topicType\":\"FITTopic\"}"
  InviteReq:
    type: "object"
    required:
    - "irCollId"
    - "irNote"
    - "irUsers"
    properties:
      irCollId:
        type: "integer"
        description: "Collection ID"
      irUsers:
        type: "array"
        description: "Users to invite"
        items:
          type: "string"
      irNote:
        type: "string"
        description: "Note to recipients of invite"
    description: "Request data for an invite"
  NewTopic:
    type: "object"
    required:
    - "newTopicContent"
    - "newTopicParent"
    - "newTopicType"
    properties:
      newTopicParent:
        type: "integer"
        description: "The parent of the new topic"
      newTopicContent:
        type: "array"
        items:
          type: "string"
      newTopicType:
        $ref: "#/definitions/FavItemType"
  PdfTitleSuggest:
    type: "object"
    required:
    - "hasManyBundles"
    - "title"
    properties:
      title:
        type: "string"
      hasManyBundles:
        type: "boolean"
