---
swagger: "2.0"
info:
  description: ""
  version: ""
  title: "ZDocs"
  termsOfService: ""
  contact: {}
host: "localhost:3000"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /search:
    get:
      summary: "Search"
      parameters:
      - name: "q"
        in: "query"
        required: false
        type: "string"
        description: "Text query you want to match against"
      - name: "type"
        in: "query"
        required: false
        type: "string"
        description: "Filter results only to specific type of content."
        enum:
        - "bundle"
        - "contributedArticle"
        - "contributedVideo"
        - "all"
        x-example: "type=bundle"
      - name: "rpp"
        in: "query"
        required: false
        type: "integer"
        description: "Results per page"
        x-example: 25
      - name: "page"
        in: "query"
        required: false
        type: "integer"
        description: "Number of the page to retrieve"
        x-example: 1
      - name: "labelkey"
        in: "query"
        required: false
        type: "string"
        description: "The label filter allows you to filter the returned list of results\
          \ based on your taxonomy tags. You can include one or more valid subjecthead\
          \ key or subjectdef key from your taxonomy."
        x-example: "labelkey=prod-rtr-industrial"
      - name: "labels"
        in: "query"
        required: false
        type: "number"
        description: "[Deprecated, replaced by labelkey] The labels filter allows\
          \ you to filter the returned list of results based on database IDs of a\
          \ valid subjecthead key or subjectdef key from your taxonomy."
        x-example: "labels=4"
      - name: "bundle"
        in: "query"
        required: false
        type: "string"
        description: "Filter search results to show only to content from a specific\
          \ bundle"
        x-example: "bundle=AISuite_230_ConceptsGuide_allOS_en_HTML5"
      - name: "date_filter.type"
        in: "query"
        required: false
        type: "string"
        description: "The date filter allows you to filter the returned list of results\
          \ based on the following date type:\n\nCreated: The date which the content\
          \ was created on based on the CMS/authoring tool records (if specified).\n\
          \nLast revised: The date which the content was last revised based on the\
          \ CMS/authoring tool records (if specified).\n\nLast uploaded: The UTC dateTime\
          \ which the content was last uploaded"
        default: "last_uploaded"
        enum:
        - "created"
        - "last_revised"
        - "last_uploaded"
        x-example: "created"
      - name: "date_filter.startValue"
        in: "query"
        required: false
        type: "string"
        format: "date-time"
        description: "The start date you want the date filter to use"
        x-example: "2018-03-27"
      - name: "date_filter.endValue"
        in: "query"
        required: false
        type: "string"
        format: "date-time"
        description: "The end date you want the date filter to use"
        x-example: "2018-03-29"
      - name: "sort.field"
        in: "query"
        required: true
        type: "string"
        description: "Sort the returned list of results by"
        default: "score"
        enum:
        - "created"
        - "last_revised"
        - "last_uploaded"
        - "title"
        - "score"
        - "views (reserved for future use)"
        x-example: "last_revised"
      - name: "sort.value"
        in: "query"
        required: true
        type: "string"
        description: "What order to sort by\n\nWhat order to sort by\n\nWhat order\
          \ to sort by"
        default: "dec"
        enum:
        - "asc"
        - "dec"
      - name: "exact_facet_match"
        in: "query"
        required: false
        type: "boolean"
        description: "[Reserved for future implementation] Only return content which\
          \ is *only* tagged with selected facets."
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Search Results"
  /bundle/:
    get:
      summary: "load a list of bundles"
      parameters:
      - name: "rpp"
        in: "query"
        required: false
        type: "integer"
        description: "Number of bundles to return in each page"
        x-example: 25
      - name: "page"
        in: "query"
        required: false
        type: "integer"
        description: "Number of the page to retrieve"
        x-example: 1
      - name: "name_filter.field"
        in: "query"
        required: false
        type: "string"
        description: "The name filter allows you to filter the returned list of bundles\
          \ based on a certain string match against the following field:"
        enum:
        - "Title"
        - "Name"
        x-example: "Title"
      - name: "name_filter.value"
        in: "query"
        required: false
        type: "string"
        description: "The value to filter the \"name\" field by"
        x-example: "Acme Installation"
      - name: "type_filter"
        in: "query"
        required: false
        type: "string"
        description: "Return only bundles of the this type"
        enum:
        - "HTMLBundle"
        - "ResourceBundle"
        x-example: "HTMLBundle"
      - name: "metadata_filter.field"
        in: "query"
        required: false
        type: "string"
        description: "The metadata filter allows you to filter the returned list of\
          \ bundles based on a hit against this metadata name:"
        x-example: "Author"
      - name: "metadata_filter.value"
        in: "query"
        required: false
        type: "string"
        description: "The value to filter the “metadata_filter.field” field by"
        x-example: "Jane Austin"
      - name: "labelkey"
        in: "query"
        required: false
        type: "string"
        description: "The label filter allows you to filter the returned list of bundles\
          \ based on your taxonomy tags. You can include one or more valid subjecthead\
          \ key or subjectdef key from your taxonomy."
        x-example: "labelkey=prod-rtr-industrial"
      - name: "labels"
        in: "query"
        required: false
        type: "string"
        description: "[Deprecated, replaced by labelkey] The labels filter allows\
          \ you to filter the returned list of bundles based on database IDs of a\
          \ valid subjecthead key or subjectdef key from your taxonomy."
        x-example: "labels=4"
      - name: "date_filter.type"
        in: "query"
        required: false
        type: "string"
        description: "The date filter allows you to filter the returned list of bundles\
          \ based on the following date type:\n\nCreated: The date which the publication\
          \ was created on based on the CMS/authoring tool records (if specified).\n\
          \nLast revised: The date which the publication was last revised based on\
          \ the CMS/authoring tool records (if specified).\n\nLast uploaded: The UTC\
          \ dateTime which the bundle was last uploaded"
        enum:
        - "created"
        - "last_revised"
        - "last_uploaded"
        x-example: "created"
      - name: "date_filter.startValue"
        in: "query"
        required: false
        type: "string"
        format: "date-time"
        description: "The start date you want the date filter to use"
        x-example: "2018-03-27"
      - name: "date_filter.endValue"
        in: "query"
        required: false
        type: "string"
        format: "date-time"
        description: "The end date you want the date filter to use"
        x-example: "2018-03-29"
      - name: "sort.field"
        in: "query"
        required: false
        type: "string"
        description: "Sort the returned list of bundles by"
        default: "last_uploaded"
        enum:
        - "created"
        - "last_revised"
        - "last_uploaded"
        - "title"
        x-example: "title"
      - name: "sort.value"
        in: "query"
        required: false
        type: "string"
        description: "What order to sort by"
        default: "dec"
        enum:
        - "asc"
        - "dec"
      - name: "exact_facet_match"
        in: "query"
        required: false
        type: "boolean"
        description: "[Reserved for future implementation] Only return content which\
          \ is *only* tagged with selected facets."
      responses:
        200:
          description: "Status 200"
          schema:
            type: "object"
            properties:
              bundle_list:
                type: "array"
                items:
                  $ref: "#/definitions/Bundle"
              pagination_data:
                $ref: "#/definitions/paginationData"
  /bundle/{bundleid}:
    get:
      summary: "Load an individual bundle"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Bundle"
    parameters:
    - name: "bundleid"
      in: "path"
      required: true
      type: "string"
  /bundle/{bundleid}/page/{navpath}:
    get:
      summary: "Access a topic"
      description: "The main path to get a topic"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Topic"
    parameters:
    - name: "bundleid"
      in: "path"
      required: true
      type: "string"
    - name: "navpath"
      in: "path"
      required: true
      type: "string"
  /users/:
    get:
      summary: "Get list of Users"
      parameters:
      - name: "rpp"
        in: "query"
        required: true
        type: "integer"
        description: "Number of users to return in each page"
        x-example: 25
      - name: "page"
        in: "query"
        required: false
        type: "integer"
        description: "Number of the page to retrieve\n\nNumber of the page to retrieve\n\
          \nNumber of the page to retrieve\n\nNumber of the page to retrieve"
        x-example: 1
      - name: "name_filter.field"
        in: "query"
        required: false
        type: "string"
        description: "The name filter allows you to filter the returned list of bundles\
          \ based on a certain string match against the following field:"
        enum:
        - "name"
        - "email"
        x-example: "email"
      - name: "name_filter.value"
        in: "query"
        required: false
        type: "string"
        description: "The value to filter the “name” field by"
        x-example: "John"
      - name: "authentication_filter"
        in: "query"
        required: false
        type: "string"
        description: "The authentication filter allows you to filter users by the\
          \ authentication provider they are using to login to Zoomin."
        enum:
        - "internal_authentication"
        - "sso"
        x-example: "internal_authentication"
      - name: "active_filter"
        in: "query"
        required: false
        type: "string"
        description: "The active filter allows you to filter active users vs. deactivated\
          \ users."
        enum:
        - "active"
        - "inactive"
        x-example: "active"
      - name: "sort.field"
        in: "query"
        required: false
        type: "string"
        description: "Sort the returned list of users by"
        enum:
        - "name"
        - "email"
        x-example: "Name"
      - name: "sort.value"
        in: "query"
        required: false
        type: "string"
        description: "What order to sort by"
        enum:
        - "asc"
        - "dec"
        x-example: "asc"
      - name: "date_filter.type"
        in: "query"
        required: false
        type: "string"
        description: "The date filter allows you to filter the returned list of users\
          \ based on their registration date or date of last login."
        enum:
        - "registered_on"
        - "last_login"
        x-example: "registered_on"
      - name: "date_filter.startValue"
        in: "query"
        required: false
        type: "string"
        format: "date-time"
        description: "The start date you want the date filter to use"
        x-example: "2018-03-27"
      - name: "date_filter.endValue"
        in: "query"
        required: false
        type: "string"
        format: "date-time"
        description: "The end date you want the date filter to use"
        x-example: "2018-03-29"
      - name: "role_filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "object"
            properties:
              user_list:
                type: "array"
                items:
                  $ref: "#/definitions/User"
              pagination_data:
                $ref: "#/definitions/paginationData"
    post:
      summary: "Create a new user"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "Status 201"
  /users/{userid}:
    get:
      summary: "Get user"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/User"
    put:
      summary: "Update user"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Status 200"
    delete:
      summary: "Delete user"
      parameters: []
      responses:
        200:
          description: "Status 200"
        401:
          description: "Status 401"
          schema:
            $ref: "#/definitions/Error"
    parameters:
    - name: "userid"
      in: "path"
      required: true
      type: "string"
  /users/{userid}/roles/{roleid}:
    parameters:
    - name: "userid"
      in: "path"
      required: true
      type: "string"
    - name: "roleid"
      in: "path"
      required: true
      type: "string"
  /admin/search_configuration/es_analyzer:
    get:
      summary: "Download"
      description: "Download a copy of a currently installed analyzer.\n\nRequired\
        \ permissions for this action: SearchConfiguration R/U"
      parameters:
      - name: "language"
        in: "query"
        required: false
        type: "string"
        description: "Specify a specific language code if you would like to obtain\
          \ a language specific-analyzer. Otherwise, the analyzer for the default\
          \ language (English) will be returned."
        x-example: "dede"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/searchAnalyzer"
      security:
      - Zoomin Generated Keys: []
    put:
      summary: "Update"
      description: "Replace an existing analyzer with a new one."
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/searchAnalyzer"
      responses:
        204:
          description: "Status 204"
      security:
      - Zoomin Generated Keys: []
  /roles/:
    get:
      summary: "load the list of Roles"
      parameters:
      - name: "results_per_page"
        in: "query"
        required: false
        type: "integer"
        description: "Number of users to return in each page"
        x-example: 25
      - name: "page_number"
        in: "query"
        required: false
        type: "integer"
        description: "Number of the page to retrieve"
        x-example: 1
      - name: "name_filter"
        in: "query"
        required: false
        type: "string"
        description: "Return only roles whose name contains this string"
        x-example: "\"viewer\""
      responses:
        200:
          description: "Status 200"
          schema:
            type: "object"
            properties:
              role_list:
                type: "array"
                items:
                  $ref: "#/definitions/Role"
              pagination_data:
                $ref: "#/definitions/paginationData"
    post:
      summary: "Create a new role"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Role"
      responses:
        200:
          description: "Status 200"
  /roles/{roleid}:
    get:
      summary: "Load an individual role"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Role"
    put:
      summary: "Update a role"
      consumes: []
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Role"
      responses:
        200:
          description: "Status 200"
    delete:
      summary: "Delete a role"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Status 401"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Status 404"
        503:
          description: "Status 503"
    parameters:
    - name: "roleid"
      in: "path"
      required: true
      type: "string"
  /roles/{roleid}/users:
    get:
      summary: "Load list of users associated to a role"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
    parameters:
    - name: "roleid"
      in: "path"
      required: true
      type: "string"
securityDefinitions:
  Zoomin Generated Keys:
    type: "apiKey"
    name: "timestamp"
    in: "query"
definitions:
  Search Result:
    type: "object"
    required:
    - "dates"
    - "snippet"
    - "title"
    - "type"
    - "url"
    properties:
      title:
        type: "string"
        description: "Title of Search result"
        example: "Information Model"
      url:
        type: "string"
        description: "Direct link to access this result's endpoint"
      snippet:
        type: "string"
        description: "HTML snippet of search result"
        example: "The Information Model defines the structured authoring environment\
          \ used to create product documentation."
      publication_title:
        type: "string"
        description: "Publication title for this result"
        example: "Codec Installation Guide"
      score:
        type: "number"
        description: "Search engine relevancy score (on a scale between 0 to 1)"
        example: 0.877
      type:
        type: "string"
        description: "Type of search result"
        enum:
        - "html_topic"
        - "nonhtml_file"
        - "contributed_article"
        - "contributed_video"
        example: "html_topic"
      dates:
        $ref: "#/definitions/Dates"
      views:
        type: "integer"
        description: "Number of this result was viewed"
        example: 55
      usefulness:
        $ref: "#/definitions/Usefulness"
      rating:
        type: "number"
        description: "Average rating of this result (on a scale of 1-5)"
        example: 2.3
      labels:
        type: "array"
        description: "Tree of taxonomy objects which apply to this bundle."
        items:
          $ref: "#/definitions/Subject"
      mimetype:
        type: "string"
        description: "Default mimetype of this result (only for type: nonhtml_file)"
        example: "application/pdf"
    description: "An object encapsulating a result for a specific search."
  Clustered Result:
    type: "object"
    required:
    - "leading_result"
    properties:
      leading_result:
        $ref: "#/definitions/Search Result"
      follower_result:
        type: "array"
        description: "One or more \"follower\" results which will appear alongside\
          \ the leading result"
        items:
          $ref: "#/definitions/Search Result"
      highlighted_snippet:
        type: "string"
        description: "HTML snippet of search result"
        example: "The Information Model defines the structured authoring environment\
          \ used to create product documentation."
    description: "Search results with identical titles that exist across multiple\
      \ bundles may be clustered together, based on the platform configuration."
  Search Results:
    type: "object"
    required:
    - "Pagination"
    - "Results"
    properties:
      Results:
        type: "array"
        description: "Results for this search"
        items:
          $ref: "#/definitions/Clustered Result"
      Pagination:
        $ref: "#/definitions/paginationData"
      did_you_mean:
        type: "array"
        description: "In case of no results, the platform may propose one or more\
          \ alternative terms that are likely to yield better results, sorted by order\
          \ of relevancy."
        items:
          type: "string"
  Bundle:
    type: "object"
    required:
    - "dates"
    - "name"
    - "title"
    - "type"
    properties:
      name:
        type: "string"
        description: "The bundle name is a unique identifier that is used as part\
          \ of the url (/bundle/{name})"
        example: "AISuite_230_ConceptsGuide_allOS_en_HTML5"
      title:
        type: "string"
        description: "The bundle title is a human readable name presented to the viewer"
        example: "AI Suite 2.3.0 Concepts Guide"
      type:
        type: "string"
        description: "Defines the type of the returned bundle:\nHTMLBundle: Standard\
          \ publication bundle converted to HTML5\nResourceBundle: Bundle consisting\
          \ of various non-HTML file formats, e.g. PDF or Word."
        enum:
        - "HTMLBundle"
        - "ResourceBundle"
        example: "HTMLBundle"
      dates:
        $ref: "#/definitions/Dates"
      attachments:
        type: "object"
        description: "Returns a direct link to this bundle’s attachments if exist."
        properties:
          bundle_attachments:
            type: "array"
            description: "Array of individual attachments."
            items:
              $ref: "#/definitions/BundleAttachment"
          all_attachments:
            type: "string"
            description: "URL to download all attachments as a single Zip file"
            example: "docs.zoominsoftware.io/bundle/publication_name/allattach"
      preprocessed_PDF:
        type: "string"
        description: "Download link to a pre-processed PDF version of this bundle\
          \ if exists."
      metadata:
        type: "array"
        description: "Returns any metadata records specified for the bundle."
        items:
          type: "object"
          properties:
            key:
              type: "string"
              description: "Metadata key"
              example: "Author"
            value:
              type: "string"
              description: "Metadata value"
              example: "Jane Austin"
      labels:
        type: "array"
        description: "Tree of taxonomy objects which apply to this bundle."
        items:
          $ref: "#/definitions/Subject"
      homepage:
        type: "string"
        description: "Returns a link to the homepage topic of the bundle if set."
      canonical_bundle:
        type: "string"
        description: "Bundle name of the bundle set as being canonical to the current\
          \ bundle."
        example: "AISuite_250_ConceptsGuide_allOS_en_HTML5"
    description: "Represents a content bundle in the system."
  BundleAttachment:
    type: "object"
    required:
    - "filename"
    - "url"
    properties:
      filename:
        type: "string"
        description: "The name of the attachment file"
        example: "sample.jpg"
      url:
        type: "string"
        description: "Attachment download url"
        example: "docs.zoominsoftware.io/bundle/publication_name/attach/filename.jpg"
    description: "Bundle Attachment is a file that can be attached to a bundle."
  Topic:
    type: "object"
    required:
    - "Breadcrumb HTML"
    - "Dates"
    - "Rating"
    - "Title"
    - "topic_html"
    properties:
      Title:
        type: "string"
        description: "Title of this topic"
      topic_html:
        type: "string"
        description: "HTML of this topic"
      Breadcrumb HTML:
        type: "string"
        description: "HTML of the breadcrumbs of this topic"
      Views:
        type: "string"
        description: "Number of views of this topic"
      Dates:
        $ref: "#/definitions/Dates"
      Like URL:
        type: "string"
        description: "Link to \"like\" this topic"
      Dislike URL:
        type: "string"
        description: "Link to \"dislike\" this topic"
      Likes:
        type: "number"
        description: "Number of \"likes\" for this topic"
      Dislikes:
        type: "number"
        description: "Number of \"dislikes\" for this topic"
      Rating:
        type: "number"
        description: "Average rating of this topic (out of 5)"
      topic_meta:
        type: "array"
        description: "Object of metadata of this topic"
        items:
          type: "object"
      labels:
        type: "array"
        description: "Tree of labels which apply to this topic"
        items:
          $ref: "#/definitions/Subject"
    description: "An object representing a topic in a bundle."
  Usefulness:
    type: "object"
    properties:
      promoters:
        type: "integer"
        description: "number of users who marked this topic as helpful"
        example: 503
      detractors:
        type: "integer"
        description: "number of users who marked this topic as unhelpful"
        example: 43
  User:
    type: "object"
    required:
    - "active"
    - "email"
    - "id"
    - "role_name"
    properties:
      id:
        type: "number"
        description: "User id"
      email:
        type: "string"
        description: "The user email address"
        example: "john.doe@acme.com"
      name:
        type: "string"
        description: "The user full name"
      auth_source:
        type: "string"
        description: "Defines which authentication source (iDP) was used to register\
          \ this user"
      active:
        type: "boolean"
        description: "Indicates if the user is active or disabled in the system."
        default: true
      registered_at:
        type: "string"
        format: "date-time"
        description: "Indicates when the user was first registered in the system"
      last_login_at:
        type: "string"
        format: "date-time"
        description: "Indicates when the user last logged into the system"
      role_name:
        type: "string"
        description: "Indicates the functional role assigned to the user"
      content_role_names:
        type: "array"
        description: "Indicates the content roles assigned to the user"
        items:
          type: "string"
    description: "Represents a single user in the system."
  Error:
    type: "object"
    required:
    - "code"
    properties:
      code:
        type: "integer"
        minimum: 400
        maximum: 599
      description:
        type: "string"
        example: "Bad query parameter [$size]: Invalid integer value [abc]"
    description: "This general error structure is used throughout this API."
    example: "{\n  \"code\": 400,\n  \"description\": \"Bad query parameter [$size]:\
      \ Invalid integer value [abc]\",\n  \"reasonPhrase\": \"Bad Request\"\n}"
  paginationData:
    type: "object"
    required:
    - "page_number"
    - "results_per_page"
    - "total_count"
    - "total_pages"
    properties:
      results_per_page:
        type: "integer"
        description: "Results being displayed per page"
      page_number:
        type: "integer"
        description: "Current page"
      total_pages:
        type: "integer"
        description: "Total number of pages for this query"
      total_count:
        type: "integer"
        description: "Total number of hits for this query"
      next_page:
        type: "string"
        description: "link to next page"
      previous_page:
        type: "string"
        description: "link to previous page"
  Subject:
    type: "object"
    required:
    - "key"
    - "navtitle"
    properties:
      key:
        type: "string"
        description: "Unique identifier from the subject scheme."
      navtitle:
        type: "string"
        description: "Human readable title"
      subjecthead_navtitle:
        type: "string"
        description: "Human readable title of the containing subjecthead"
      hidden:
        type: "boolean"
        description: "Indicates if the subject is defined as hidden in the subject\
          \ scheme"
      children:
        type: "array"
        items:
          $ref: "#/definitions/Subject"
    description: "Represents a single subjectdef (facet) in the taxonomy. "
    example: "[{\n\t\"key\": \"installer\",\n\t\"navtitle\": \"Installation technician\"\
      ,\n\t\"subjecthead_navtitle\": \"Role\",\n\t\"children\": [{\n\t\t\"key\": \"\
      installerhw\",\n\t\t\"navtitle\": \"Hardware installation\",\n\t\t\"subjecthead_navtitle\"\
      : \"Role\"\n\t},\n\t{\n\t\t\"key\": \"installersw\",\n\t\t\"navtitle\": \"Software\
      \ installation\",\n\t\t\"subjecthead_navtitle\": \"Role\"\n\t}]\n},\n{\n\t\"\
      key\": \"maintainer\",\n\t\"navtitle\": \"Maintenance technician\",\n\t\"subjecthead_navtitle\"\
      : \"Role\"\n}]"
  ContentRole:
    type: "object"
    required:
    - "id"
    - "includedSubjects"
    - "name"
    properties:
      id:
        type: "integer"
        description: "Content role id"
      name:
        type: "string"
        description: "Content role name"
      description:
        type: "string"
        description: "Textual description of the content role"
      includedSubjects:
        type: "array"
        description: "The list of included subjects in this content role"
        items:
          $ref: "#/definitions/Subject"
    description: "Represents a single content role in the system."
  Watermark:
    type: "object"
    required:
    - "active"
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        description: "Watermark id"
      name:
        type: "string"
        description: "Human readable name"
      active:
        type: "boolean"
        description: "Indicates if the watermark is active or disabled in the system"
      priority:
        type: "integer"
        description: "The priority of the watermark compared to other watermarks in\
          \ the system"
      description:
        type: "string"
        description: "Watermark description"
      created_at:
        type: "string"
        format: "date-time"
        description: "Time of watermark creation"
      last_updated_at:
        type: "string"
        format: "date-time"
        description: "Time the watermark was last updated"
      html_text:
        type: "string"
        description: "Text used to present the watermark in html topic pages"
      pdf_text:
        type: "string"
        description: "Text used to present the watermark when interpolated into pdf\
          \ outputs"
      subjects:
        type: "array"
        description: "Defines which subjects the content needs to be classified with\
          \ in order to present this watermark."
        items:
          $ref: "#/definitions/Subject"
    description: "Defines a dynamic watermark entity."
  Campaign:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Campaign id"
      name:
        type: "string"
        description: "Human readable name"
      active:
        type: "boolean"
        description: "Indicates if the campaign is active or disabled in the system"
      priority:
        type: "integer"
        description: "The priority of the campaign compared to other campaigns in\
          \ the system"
      description:
        type: "string"
        description: "Campaign description"
      created_at:
        type: "string"
        format: "date-time"
        description: "Time of campaign creation"
      last_updated_at:
        type: "string"
        format: "date-time"
        description: "Time the campaign was last updated"
      type:
        type: "string"
        description: "Defines the visual output of the campaign: either center-screen\
          \ popup or a top bar"
        enum:
        - "popup"
        - "topbar"
      languages:
        type: "array"
        description: "If not null, the campaign would only be presented to users whose\
          \ browser locale is set to one of these languages"
        items:
          $ref: "#/definitions/language"
      start_date:
        type: "string"
        format: "date-time"
        description: "Time of campaign start (in UTC)"
      end_date:
        type: "string"
        format: "date-time"
        description: "Time of campaign end (in UTC)"
      html:
        type: "string"
        description: "The actual html of the campaign"
      css_file:
        type: "string"
        format: "binary"
        description: "Optional css to style the campaign html"
      background_image:
        type: "string"
        format: "binary"
        description: "Optional background image which would be used as a background\
          \ to the campaign"
      url:
        type: "string"
        description: "Click-thru url that the campaign banner would redirect to once\
          \ clicked"
      subjects:
        type: "array"
        description: "The campaign would only be presented to users associated with\
          \ the content roles appearing in this array"
        items:
          $ref: "#/definitions/ContentRole"
    description: "Represents a campaign or announcement in the system."
  Sitemap:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Sitemap name"
      map:
        type: "string"
        format: "binary"
        description: "Sitemap file (compatible with the Sitemap protocol)"
    description: "Defines the SEO sitemap(s)"
  Content:
    type: "object"
    properties:
      id:
        type: "string"
      type:
        type: "string"
        enum:
        - "topic"
        - "resourcefile"
        - "how-to"
        - "video"
      bundle:
        $ref: "#/definitions/Bundle"
      title:
        type: "string"
      shortdesc:
        type: "string"
      body:
        type: "string"
    description: "Represents a piece of content in the system"
  language:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Database id for this language"
      code:
        type: "string"
        description: "Language code"
        example: "en-us"
      name:
        type: "string"
        description: "Language name"
        example: "English"
    description: "Defines a valid language in the system"
  Dates:
    type: "object"
    required:
    - "Added on"
    properties:
      Added on:
        type: "string"
        format: "date-time"
        description: "Time this topic was added\n\nTime this topic was added"
      Created on:
        type: "string"
        format: "date-time"
        description: "Time this topic was created"
      Updated on:
        type: "string"
        format: "date-time"
        description: "Time this topic was updated"
    description: "Object to encapsulate dates for a topic"
  searchAnalyzer:
    type: "object"
    properties:
      analyzer_json:
        type: "object"
        description: "The elasticsearch analyzer file specified in the system"
      language:
        $ref: "#/definitions/language"
    description: "Represents the Elasticsearch analyzer used in the system."
  Role:
    type: "object"
    required:
    - "id"
    - "includedPermissions"
    - "name"
    properties:
      id:
        type: "integer"
        description: "Role id"
      name:
        type: "string"
        description: "Role name"
      description:
        type: "string"
        description: "Textual description of the role"
      includedPermissions:
        type: "array"
        description: "Contained permissions in this role"
        items:
          $ref: "#/definitions/Permission"
    description: "Defines a functional role in the system."
  Permission:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        description: "Permission id"
      name:
        type: "string"
        description: "Permission name"
      type:
        type: "string"
        description: "Indicates the CRUD (create, read, update, delete) functionality."
        enum:
        - "C"
        - "R"
        - "U"
        - "D"
    description: "Represents a single permission in the system"
